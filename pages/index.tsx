/* File: pages/index.tsx */
import { useEffect, useState } from "react";
import { MapContainer, TileLayer, CircleMarker, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Bar } from "react-chartjs-2";
import { Button } from "@/components/ui/button";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

export default function GrantDashboard() {
  const [funders, setFunders] = useState([]);
  const [themeFilter, setThemeFilter] = useState("");
  const [regionFilter, setRegionFilter] = useState("");
  const [savedFilters, setSavedFilters] = useState([]);

  useEffect(() => {
    async function fetchFunders() {
      try {
        const response = await fetch("https://data.threesixtygiving.org/data.json");
        const data = await response.json();

        const groupedFunders = {};

        data.grants.forEach((grant) => {
          const key = \`\${grant.funderName}-\${grant.recipientPostcode}\`;
          if (!groupedFunders[key]) {
            groupedFunders[key] = {
              name: grant.funderName || "Unknown Funder",
              theme: grant.subject || "General",
              postcode: grant.recipientPostcode || "",
              lat: grant.latitude || 51.5,
              lng: grant.longitude || -0.1,
              grants: 1,
              totalAmount: grant.amountAwarded || 0,
              scope: grant.geographicScope || "Unknown"
            };
          } else {
            groupedFunders[key].grants += 1;
            groupedFunders[key].totalAmount += grant.amountAwarded || 0;
          }
        });

        setFunders(Object.values(groupedFunders));
      } catch (error) {
        console.error("Failed to fetch funder data", error);
      }
    }

    fetchFunders();
  }, []);

  const filteredFunders = funders.filter(
    (funder) =>
      (!themeFilter || funder.theme.toLowerCase().includes(themeFilter.toLowerCase())) &&
      (!regionFilter || funder.postcode.toUpperCase().startsWith(regionFilter.toUpperCase()))
  );

  const themeCounts = filteredFunders.reduce((acc, funder) => {
    acc[funder.theme] = (acc[funder.theme] || 0) + 1;
    return acc;
  }, {});

  const themeChartData = {
    labels: Object.keys(themeCounts),
    datasets: [
      {
        label: "Number of Funders",
        data: Object.values(themeCounts),
        backgroundColor: "rgba(75, 192, 192, 0.5)"
      }
    ]
  };

  const exportData = () => {
    const csvRows = [
      ["Funder Name", "Theme", "Postcode", "Grants", "Amount", "Scope"],
      ...filteredFunders.map(f => [f.name, f.theme, f.postcode, f.grants, f.totalAmount, f.scope])
    ];
    const csvContent = csvRows.map(e => e.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "grantmaker_data.csv";
    link.click();
  };

  const generateReport = () => {
    const textReport = \`
UK Grantmaker Snapshot
=======================

Filters:
- Theme: \${themeFilter || "All"}
- Region: \${regionFilter || "All"}

Matching Funders (\${filteredFunders.length}):
\${filteredFunders.map(f => \`- \${f.name} | \${f.theme} | £\${f.totalAmount.toLocaleString()}\`).join("\n")}

Top Themes:
\${Object.entries(themeCounts).map(([k, v]) => \`- \${k}: \${v}\`).join("\n")}

Suggested Collaborators:
\${filteredFunders.length > 1 ? filteredFunders.slice(0, 5).map(f => \`- \${f.name}\`).join("\n") : "None"}

Generated by GrantDashboard | https://360Giving.org
    \`;
    const blob = new Blob([textReport], { type: "text/plain;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "grantmaker_report.txt";
    link.click();
  };

  const saveCurrentFilters = () => {
    setSavedFilters([...savedFilters, { theme: themeFilter, region: regionFilter }]);
  };

  const applySavedFilter = (filter) => {
    setThemeFilter(filter.theme);
    setRegionFilter(filter.region);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 p-4">
      <div className="md:col-span-1 space-y-4">
        <Card>
          <CardContent className="space-y-4 p-4">
            <h2 className="text-xl font-semibold">Filters</h2>
            <Input placeholder="Filter by theme (e.g. Health)" value={themeFilter} onChange={(e) => setThemeFilter(e.target.value)} />
            <Input placeholder="Filter by postcode prefix (e.g. EC1)" value={regionFilter} onChange={(e) => setRegionFilter(e.target.value)} />
            <Button onClick={exportData}>Export as CSV</Button>
            <Button onClick={generateReport}>Download Report</Button>
            <Button onClick={saveCurrentFilters}>Save Filter</Button>
            <div>
              <h3 className="text-md font-semibold mt-2">Saved Filters</h3>
              {savedFilters.map((filter, idx) => (
                <Button key={idx} className="mt-1 w-full" onClick={() => applySavedFilter(filter)}>
                  Theme: {filter.theme || "All"}, Region: {filter.region || "All"}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="space-y-2 p-4">
            <h2 className="text-xl font-semibold">Summary</h2>
            <p>Total Funders: {filteredFunders.length}</p>
            {filteredFunders.map((funder, idx) => (
              <div key={idx} className="text-sm">
                <strong>{funder.name}</strong> - {funder.theme} ({funder.scope})
              </div>
            ))}
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <h2 className="text-xl font-semibold mb-2">Themes Breakdown</h2>
            <Bar data={themeChartData} options={{ responsive: true, plugins: { legend: { position: "top" } } }} />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 space-y-2">
            <h2 className="text-xl font-semibold">Collaboration Opportunities</h2>
            {filteredFunders.length > 1 ? (
              <>
                <p>{filteredFunders.length} funders are active in this theme/region. Consider joint initiatives or sharing insights.</p>
                <ul className="list-disc list-inside text-sm">
                  {filteredFunders.slice(0, 5).map((f, idx) => (
                    <li key={idx}>{f.name} – {f.theme}</li>
                  ))}
                </ul>
              </>
            ) : (
              <p>No overlapping funders detected. Try broadening your filters.</p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <h2 className="text-xl font-semibold mb-2">Side-by-Side Comparison</h2>
            <table className="w-full text-sm">
              <thead>
                <tr>
                  <th className="text-left">Funder</th>
                  <th className="text-left">Theme</th>
                  <th className="text-left">Region</th>
                  <th className="text-left">Total £</th>
                </tr>
              </thead>
              <tbody>
                {filteredFunders.slice(0, 5).map((f, idx) => (
                  <tr key={idx}>
                    <td>{f.name}</td>
                    <td>{f.theme}</td>
                    <td>{f.postcode}</td>
                    <td>£{f.totalAmount.toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>

      <div className="md:col-span-3">
        <MapContainer center={[54.5, -3]} zoom={6} style={{ height: "80vh", width: "100%" }}>
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution="&copy; OpenStreetMap contributors" />
          {filteredFunders.map((funder, idx) => (
            <CircleMarker
              key={idx}
              center={[funder.lat, funder.lng]}
              radius={Math.min(20, Math.max(5, funder.totalAmount / 10000))}
              pathOptions={{ color: funder.totalAmount < 5000 ? "gray" : funder.totalAmount < 20000 ? "orange" : "blue", fillOpacity: 0.5 }}
            >
              <Popup>
                <strong>{funder.name}</strong>
                <br />Theme: {funder.theme}
                <br />Postcode: {funder.postcode}
                <br />Grant Amount: £{funder.totalAmount.toLocaleString()}
                <br />Grants: {funder.grants}
              </Popup>
            </CircleMarker>
          ))}
        </MapContainer>
      </div>
    </div>
  );
}
